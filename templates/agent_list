{% extends "base.html" %}
{% block title %}AI Career Agent – CareerAI{% endblock %}
{% block content %}

<h1 class="text-2xl font-semibold mb-4">AI Career Agent</h1>

<!-- Gating banner (Free users can run FAST only; Deep shows a Pro lock) -->
{% if not is_pro() %}
  <div class="mb-4 border rounded p-3 bg-yellow-50 dark:bg-yellow-900/20 text-sm">
    Deep Agent runs are <strong>Pro only</strong>. You can still run <strong>Fast</strong> mode below.
    <a class="ml-2 underline text-purple-700 dark:text-purple-300" href="/pricing">Upgrade to Pro</a>
  </div>
{% endif %}

<div class="glass rounded-xl p-4">
  <form method="post" action="{{ url_for('agent.run_now') }}" id="agentRunForm" class="grid md:grid-cols-4 gap-3 items-end">
    <div class="md:col-span-2">
      <label class="block text-sm mb-1">Target role</label>
      <input name="role" class="w-full border rounded p-2" placeholder="e.g., Data Analyst Intern" value="Data Analyst Intern" />
    </div>

    <div>
      <label class="block text-sm mb-1">Mode</label>
      <select name="mode" class="w-full border rounded p-2" id="modeSelect">
        <option value="fast" selected>Fast (Free)</option>
        <option value="deep" {% if not is_pro() %}disabled{% endif %}>Deep (Pro)</option>
      </select>
    </div>

    <div>
      <button class="w-full px-4 py-2 bg-purple-600 text-white rounded" id="runBtn" type="submit">
        ▶ Run Now
      </button>
    </div>
  </form>
</div>

<h2 class="mt-8 mb-3 font-semibold">Recent runs</h2>

<div id="runs" class="grid gap-3">
  {% if not jobs or jobs|length == 0 %}
    <div class="text-sm text-slate-500">No agent runs yet. Run your first one above.</div>
  {% else %}
    {% for j in jobs %}
      <div class="border rounded p-3 bg-white/70 dark:bg-slate-900/40">
        <div class="flex justify-between items-center">
          {% set prefs = j.preferences_json | default('{}') %}
          <div>
            <div class="font-semibold">Run #{{ j.id }}</div>
            <div class="text-xs text-slate-500">Created {{ j.created_at.strftime('%Y-%m-%d %H:%M') if j.created_at else '' }}</div>
          </div>
          <button class="text-sm underline" data-toggle="#packs-{{ j.id }}">Show results</button>
        </div>

        <div id="packs-{{ j.id }}" class="mt-3 hidden" data-packs='{{ j.results_json | tojson }}'>
          <!-- skeleton placeholder -->
          <div class="skeleton h-16 rounded"></div>
        </div>
      </div>
    {% endfor %}
  {% endif %}
</div>

<script>
  // Submit UX: disable button + skeleton feel
  const form = document.getElementById('agentRunForm');
  const runBtn = document.getElementById('runBtn');
  form.addEventListener('submit', ()=>{
    runBtn.disabled = true;
    runBtn.textContent = 'Running…';
  });

  // Toggle & lazy render packs
  function renderPacks(container){
    const data = container.getAttribute('data-packs');
    try{
      const packs = JSON.parse(data || '[]');
      if(!Array.isArray(packs) || packs.length===0){
        container.innerHTML = '<div class="text-sm text-slate-500">No results stored for this run.</div>';
        return;
      }
      container.innerHTML = packs.map((p, idx)=>{
        // Display a few common fields if present
        const verdict = (p.overall_verdict && p.overall_verdict.status) ? p.overall_verdict.status : (p.verdict || '—');
        const score   = (p.score !== undefined) ? p.score : (p.match_score !== undefined ? p.match_score : '—');
        const bullets = (p.key_points || p.highlights || []).slice(0,4);
        return `
          <div class="border rounded p-3 mb-3">
            <div class="font-semibold mb-1">Result #${idx+1} — Verdict: ${verdict}, Score: ${score}</div>
            ${bullets.length ? `<ul class="list-disc pl-5 text-sm">${bullets.map(b=>`<li>${b}</li>`).join('')}</ul>` : `<div class="text-sm text-slate-500">Details available in stored JSON.</div>`}
          </div>
        `;
      }).join('');
    }catch(e){
      container.innerHTML = '<div class="text-sm text-red-600">Failed to parse results.</div>';
    }
  }

  document.querySelectorAll('[data-toggle]').forEach(btn=>{
    btn.addEventListener('click', ()=>{
      const sel = btn.getAttribute('data-toggle');
      const box = document.querySelector(sel);
      const isHidden = box.classList.contains('hidden');
      document.querySelectorAll('#runs [id^="packs-"]').forEach(x=> x.classList.add('hidden'));
      if(isHidden){
        box.classList.remove('hidden');
        // lazy render first time
        if(!box.dataset.rendered){
          setTimeout(()=>{ renderPacks(box); box.dataset.rendered = '1'; window.__confettiNow && window.__confettiNow(); }, 300);
        }
      }
    });
  });
</script>

{% endblock %}
